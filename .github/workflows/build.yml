name: Build and Test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build and Test ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: essex
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: essex
            use_cross: false
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: essex
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: essex
            use_cross: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use_cross
      run: cargo install cross

    - name: Build
      run: |
        if [ "${{ matrix.use_cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Run tests
      run: |
        if [ "${{ matrix.use_cross }}" = "true" ]; then
          cross test --target ${{ matrix.target }} -- --nocapture
        else
          cargo test --target ${{ matrix.target }} -- --nocapture
        fi

    - name: Prepare artifact
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe artifacts/
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} artifacts/
        fi
        cd artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../essex-${{ matrix.target }}.zip ${{ matrix.binary_name }}.exe
        else
          tar czf ../essex-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}
        fi
        cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: essex-${{ matrix.target }}
        path: essex-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        retention-days: 5

  # Create GitHub release when a tag is pushed
  release:
    name: Create Release
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: essex-*/*
          draft: false
          prerelease: false
          generate_release_notes: true
